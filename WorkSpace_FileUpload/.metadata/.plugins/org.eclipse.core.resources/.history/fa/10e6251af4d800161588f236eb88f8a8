package local.filestorage.rest.api;

import java.util.HashSet;
import java.util.Set;

import javax.naming.NamingException;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

import org.apache.log4j.Logger;

@ApplicationPath("/rest/")
public class FileStoregeApplication extends Application
{
	private Set<Object> singletons = new HashSet<Object>();
	private Set<Class<?>> empty = new HashSet<Class<?>>();

	private Logger logger = Logger.getLogger(FileStoregeApplication.class);

	public FileStoregeApplication()
	{
		try
		{
			singletons.add(new AdminsService());
			singletons.add(new AccountsService());
			singletons.add(new NodesService());
			singletons.add(new IdentitiesService());
			singletons.add(new TopicsService());
			singletons.add(new MessagesService());
			singletons.add(new BannersService());
			singletons.add(new MenuesService());
			singletons.add(new MenuItemsService());
			singletons.add(new ModulesService());
			singletons.add(new ClientLibrariesService());
			singletons.add(new ClientModulesService());
			singletons.add(new ModuleTopicsService());
			singletons.add(new CMTopicsService());
			singletons.add(new HowItWorksService());
			singletons.add(new StaticAreasService());
			singletons.add(new PackagesService());
			singletons.add(new EmailSendService());
			singletons.add(new FilesService());
		}
		catch (NamingException ex)
		{
			logger.error("Exception while starting test configuration service", ex);
		}
	}

	@Override
	public Set<Class<?>> getClasses()
	{
		return empty;
	}

	@Override
	public Set<Object> getSingletons()
	{
		return singletons;
	}

	public static String getRequestIPAddress(HttpServletRequest request)
	{
		String forwardedAddress = request.getHeader("X-Forwarded-For");
		if (forwardedAddress != null)
			return forwardedAddress;

		return request.getRemoteAddr();
	}
}
package local.filestorage.rest.api;

import static local.filestorage.rest.json.ResponseData.*;

import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;

import org.jboss.resteasy.annotations.providers.multipart.MultipartForm;

import local.filestorage.rest.json.FileUploadForm;
import local.filestorage.rest.json.GenericJsonResponse;
import local.filestorage.rest.util.StorageUtil;
import local.filestorage.server.StorageBean;

@Path("/files")
public class FilesService {
	private StorageBean settingsBean;

	public FilesService() throws NamingException {
		settingsBean = (StorageBean) (new InitialContext()).lookup(BEAN_LOOKUP);
	}

	@POST
	@Path("/upload")
	@Consumes(MediaType.MULTIPART_FORM_DATA)
	@Produces(MediaType.APPLICATION_JSON)
	public GenericJsonResponse upload(@Context HttpServletRequest request, @MultipartForm FileUploadForm form) {
		if (!form.isValid())
			return new GenericJsonResponse(ERROR, INVALID_PARAMETERS);

		try {
			StorageUtil.store(form.getFileName(), settingsBean.getStorageFolder(), form.getFileData());
			return new GenericJsonResponse(SUCCESS, null);
		} catch (IOException e) {
			return new GenericJsonResponse(ERROR, INTERNAL_SERVER_ERROR + e.getMessage());
		}
	}

	@GET
	@Path("/list/{username}/{sessionID}")
	@Produces(MediaType.APPLICATION_JSON)
	@Consumes(MediaType.APPLICATION_JSON)
	public GenericJsonResponse listFiles(@Context HttpServletRequest request, @Context ServletContext context,
			@PathParam("username") String username, @PathParam("sessionID") String sessionID) {
		AsyncDriver driver = settingsBean.getCassandraDriver();
		try {
			Account currAccount = AsyncTaskProcessor.validateCustomer(driver, username, sessionID);
			if (currAccount == null)
				return new GenericJsonResponse(ERROR, AUTHENTICATION_FAILURE);

			if (!currAccount.authorized())
				return new GenericJsonResponse(ERROR, UNAUTHORIZED);

			int pageSize = settingsBean.getCustomerRequestPageSize();
			List<ImageFile> allFiles = new ArrayList<>();
			List<ImageFile> page = null;
			UUID firstKey = null;
			do {
				page = AsyncTaskProcessor.getImageFiles(driver, firstKey, null, false, false, pageSize);
				if (!page.isEmpty()) {
					allFiles.addAll(page);
					firstKey = page.get(page.size() - 1).getImageID();
				}
			} while (page.size() == pageSize);

			List<String> list = new ArrayList<>();
			for (ImageFile file : allFiles) {
				String imageURL = StorageUtil.assembleFileURL(settingsBean.getGoogleBucketName(),
						FileType.IMAGE_FILES.getFolderName(), file.getImageID());
				list.add(imageURL);
			}

			return new ListResponse<String>(list);
		} catch (DalException e) {
			return new GenericJsonResponse(ERROR,
					INTERNAL_SERVER_ERROR + e.getExceptionType().toString() + ":" + e.getMessage());
		} finally {
			settingsBean.releaseCassandraDriver(driver);
		}
	}
}
